!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BEGIN_TRIE_NAMESPACE	trie.h	37;"	d
DOUBLE_TRIE	trie.h	/^        DOUBLE_TRIE   \/**< Two Trie. *\/$/;"	e	enum:trie::trie_type
END_TRIE_NAMESPACE	trie.h	38;"	d
SINGLE_TRIE	trie.h	/^        SINGLE_TRIE,  \/**< Tail Trie. *\/$/;"	e	enum:trie::trie_type
TRIE_H_	trie.h	30;"	d
TRIE_IMPL_H_	trie_impl.h	30;"	d
UNKNOW	trie.h	/^        UNKNOW = 0,   \/**< Unknow. *\/$/;"	e	enum:trie::trie_type
accept	trie_impl.h	/^        size_type accept;$/;"	m	struct:double_trie::__anon5
accept_	trie_impl.h	/^    accept_type *accept_;$/;"	m	class:double_trie
accept_index	trie_impl.h	/^        size_type accept_index;$/;"	m	struct:double_trie::__anon7
accept_size	trie_impl.h	/^        size_type accept_size; \/\/\/< Accept array size.$/;"	m	struct:double_trie::__anon4
accept_type	trie_impl.h	/^    } accept_type;$/;"	t	class:double_trie	typeref:struct:double_trie::__anon5
assign	trie.h	/^    void assign(const char *data, size_t length)$/;"	f	class:trie::key_type
assign	trie.h	/^    void assign(const char_type *data, size_t length)$/;"	f	class:trie::key_type
bad_trie_archive	trie.h	/^    explicit bad_trie_archive(const char *s):std::runtime_error(s) {}$/;"	f	class:bad_trie_archive
bad_trie_archive	trie.h	/^class bad_trie_archive: public std::runtime_error {$/;"	c
bad_trie_source	trie.h	/^    explicit bad_trie_source(const char *s):std::runtime_error(s) {}$/;"	f	class:bad_trie_source
bad_trie_source	trie.h	/^class bad_trie_source: public std::runtime_error {$/;"	c
base	trie_impl.h	/^        size_type base;  \/\/\/< The BASE value.$/;"	m	struct:basic_trie::__anon1
base	trie_impl.h	/^    size_type base(size_type s) const$/;"	f	class:basic_trie
basic_trie	trie_impl.cc	/^basic_trie::basic_trie(const basic_trie &trie)$/;"	f	class:basic_trie
basic_trie	trie_impl.cc	/^basic_trie::basic_trie(size_type size,$/;"	f	class:basic_trie
basic_trie	trie_impl.cc	/^basic_trie::basic_trie(void *header, void *states)$/;"	f	class:basic_trie
basic_trie	trie_impl.h	/^class basic_trie: public trie$/;"	c
build	trie_impl.cc	/^void double_trie::build(const char *filename, bool verbose)$/;"	f	class:double_trie
build	trie_impl.cc	/^void single_trie::build(const char *filename, bool verbose)$/;"	f	class:single_trie
build	trie_impl.h	/^    void build(const char *filename, bool verbose)$/;"	f	class:basic_trie
build_trie	trie_tool.cc	/^build_trie(const char *source, const char *index, trie::trie_type type, bool verbose)$/;"	f	file:
c_str	trie.h	/^    const char *c_str() const$/;"	f	class:trie::key_type
char_in	trie.h	/^    static char_type char_in(const char ch)$/;"	f	class:trie::key_type
char_out	trie.h	/^    static char char_out(char_type ch)$/;"	f	class:trie::key_type
char_type	trie.h	/^    typedef int32_t char_type;$/;"	t	class:trie
char_type	trie.h	/^    typedef trie::char_type char_type;$/;"	t	class:trie::key_type
check	trie_impl.h	/^        size_type check; \/\/\/< The CHECK value.$/;"	m	struct:basic_trie::__anon1
check	trie_impl.h	/^    size_type check(size_type s) const$/;"	f	class:basic_trie
check_reverse_transition	trie_impl.h	/^    bool check_reverse_transition(size_type s, char_type ch) const$/;"	f	class:basic_trie
check_separator	trie_impl.h	/^    bool check_separator(size_type s) const$/;"	f	class:double_trie
check_transition	trie_impl.h	/^    bool check_transition(size_type s, size_type t) const$/;"	f	class:basic_trie
clear	trie.h	/^    void clear()$/;"	f	class:trie::key_type
clone	trie_impl.cc	/^void basic_trie::clone(const basic_trie &trie)$/;"	f	class:basic_trie
common_	trie_impl.h	/^    common_type common_;$/;"	m	class:single_trie
common_type	trie_impl.h	/^    } common_type;$/;"	t	class:single_trie	typeref:struct:single_trie::__anon9
compact_header	trie_impl.h	/^    const header_type *compact_header() const$/;"	f	class:basic_trie
compact_header_	trie_impl.h	/^    mutable header_type compact_header_;$/;"	m	class:basic_trie
count_referer	trie_impl.h	/^    size_t count_referer(size_type s) const$/;"	f	class:double_trie
create_branch	trie_impl.cc	/^void single_trie::create_branch(size_type s,$/;"	f	class:single_trie
create_from_memory	trie_impl.h	/^    static const basic_trie *create_from_memory(void *header,$/;"	f	class:basic_trie
create_transition	trie_impl.cc	/^basic_trie::create_transition(size_type s, char_type ch)$/;"	f	class:basic_trie
create_trie	trie.cc	/^trie* trie::create_trie(const char *archive)$/;"	f	class:trie
create_trie	trie.cc	/^trie* trie::create_trie(trie_type type, size_t size)$/;"	f	class:trie
cstr_	trie.h	/^    mutable char *cstr_;  \/\/\/< a C-style buffer for converting.$/;"	m	class:trie::key_type
cstr_capacity_	trie.h	/^    mutable size_t cstr_capacity_;  \/\/\/< Size of cstr_.$/;"	m	class:trie::key_type
data	trie.h	/^    const char_type *data() const$/;"	f	class:trie::key_type
data	trie_impl.h	/^        char_type *data; \/\/\/< Data buffer.$/;"	m	struct:single_trie::__anon9
data	trie_impl.h	/^        value_type data;$/;"	m	struct:double_trie::__anon6
data_	trie.h	/^    char_type *data_;  \/\/\/< Internal data buffer.$/;"	m	class:trie::key_type
data_capacity_	trie.h	/^    size_t data_capacity_;  \/\/\/< capacity of data_.$/;"	m	class:trie::key_type
double_trie	trie_impl.cc	/^double_trie::double_trie(const char *filename)$/;"	f	class:double_trie
double_trie	trie_impl.cc	/^double_trie::double_trie(size_t size)$/;"	f	class:double_trie
double_trie	trie_impl.h	/^class double_trie: public trie {$/;"	c
exists_	trie_impl.h	/^    std::vector<char_type> exists_;$/;"	m	class:double_trie
extremum_type	trie_impl.h	/^    } extremum_type;$/;"	t	class:basic_trie	typeref:struct:basic_trie::__anon3
find_accept_entry	trie_impl.h	/^    size_type find_accept_entry(size_type i)$/;"	f	class:double_trie
find_archive_type	trie.cc	/^static trie::trie_type find_archive_type(const char *archive)$/;"	f	file:
find_base	trie_impl.cc	/^basic_trie::find_base(const char_type *inputs, const extremum_type &extremum)$/;"	f	class:basic_trie
find_exist_target	trie_impl.h	/^    size_type find_exist_target(size_type s,$/;"	f	class:basic_trie
find_index_entry	trie_impl.h	/^    size_type find_index_entry(size_type s)$/;"	f	class:double_trie
free_accept_	trie_impl.h	/^    std::deque<size_type> free_accept_;$/;"	m	class:double_trie
free_accept_entry	trie_impl.h	/^    void free_accept_entry(size_type s)$/;"	f	class:double_trie
free_index_	trie_impl.h	/^    std::deque<size_type> free_index_;$/;"	m	class:double_trie
front_relocator_	trie_impl.h	/^    trie_relocator<double_trie> *front_relocator_, *rear_relocator_;$/;"	m	class:double_trie
front_trie	trie_impl.h	/^    const basic_trie *front_trie() const$/;"	f	class:double_trie
go_backward	trie_impl.h	/^    size_type go_backward(size_type s,$/;"	f	class:basic_trie
go_forward	trie_impl.h	/^    size_type go_forward(size_type s,$/;"	f	class:basic_trie
go_forward_reverse	trie_impl.h	/^    size_type go_forward_reverse(size_type s,$/;"	f	class:basic_trie
header	trie_impl.h	/^    const header_type *header() const$/;"	f	class:basic_trie
header_	trie_impl.h	/^    header_type *header_;   \/\/\/< Pointer to header$/;"	m	class:single_trie
header_	trie_impl.h	/^    header_type *header_;  \/\/\/< Pointer to header.$/;"	m	class:basic_trie
header_	trie_impl.h	/^    header_type *header_;$/;"	m	class:double_trie
header_type	trie_impl.h	/^    } header_type;$/;"	t	class:basic_trie	typeref:struct:basic_trie::__anon2
header_type	trie_impl.h	/^    } header_type;$/;"	t	class:double_trie	typeref:struct:double_trie::__anon4
header_type	trie_impl.h	/^    } header_type;$/;"	t	class:single_trie	typeref:struct:single_trie::__anon8
help_message	trie_tool.cc	/^static void help_message()$/;"	f	file:
index	trie_impl.h	/^        size_type index;$/;"	m	struct:double_trie::__anon6
index_	trie_impl.h	/^    index_type *index_;$/;"	m	class:double_trie
index_size	trie_impl.h	/^        size_type index_size;  \/\/\/< Index array size.$/;"	m	struct:double_trie::__anon4
index_type	trie_impl.h	/^    } index_type;$/;"	t	class:double_trie	typeref:struct:double_trie::__anon6
insert	trie.cc	/^void trie::insert(const char *inputs, size_t length,$/;"	f	class:trie
insert	trie_impl.cc	/^void basic_trie::insert(const key_type &key, const value_type &value)$/;"	f	class:basic_trie
insert	trie_impl.cc	/^void double_trie::insert(const key_type &key, const value_type &value)$/;"	f	class:double_trie
insert	trie_impl.cc	/^void single_trie::insert(const key_type &key, const value_type &value)$/;"	f	class:single_trie
insert_suffix	trie_impl.cc	/^void single_trie::insert_suffix(size_type s,$/;"	f	class:single_trie
kCharsetSize	trie.h	/^    static const char_type kCharsetSize = 257;$/;"	m	class:trie::key_type
kDefaultCommonSize	trie_impl.h	/^    static const size_t kDefaultCommonSize = 256;$/;"	m	class:single_trie
kDefaultStateSize	trie_impl.h	/^    static const size_t kDefaultStateSize = 4096;$/;"	m	class:basic_trie
kTerminator	trie.h	/^    static const char_type kTerminator = kCharsetSize;$/;"	m	class:trie::key_type
key_type	trie.h	/^    explicit key_type(const char *data, size_t length)$/;"	f	class:trie::key_type
key_type	trie.h	/^    explicit key_type(const key_type &key)$/;"	f	class:trie::key_type
key_type	trie.h	/^    key_type()$/;"	f	class:trie::key_type
key_type	trie.h	/^class trie::key_type {$/;"	c	class:trie
last_base_	trie_impl.h	/^    size_type last_base_;  \/\/\/< Last avaiable BASE value.$/;"	m	class:basic_trie
length	regress_case.cc	10;"	d	file:
length	regress_prefix.cc	10;"	d	file:
length	trie.h	/^    size_t length() const$/;"	f	class:trie::key_type
length_	trie.h	/^    size_t length_;  \/\/\/< Length(size) of data_.$/;"	m	class:trie::key_type
lhs_	trie_impl.h	/^    basic_trie *lhs_, *rhs_;$/;"	m	class:double_trie
lhs_insert	trie_impl.cc	/^double_trie::lhs_insert(size_type s, const char_type *inputs, value_type value)$/;"	f	class:double_trie
link_state	trie_impl.h	/^    size_type link_state(size_type s) const$/;"	f	class:double_trie
magic	trie_impl.h	/^        char magic[16];  \/\/\/< Archive magic.$/;"	m	struct:double_trie::__anon4
magic	trie_impl.h	/^        char magic[16];  \/\/\/< Archive magic.$/;"	m	struct:single_trie::__anon8
magic_	trie_impl.cc	/^const char double_trie::magic_[16] = "TWO_TRIE";$/;"	m	class:double_trie	file:
magic_	trie_impl.cc	/^const char single_trie::magic_[16] = "TAIL_TRIE";$/;"	m	class:single_trie	file:
magic_	trie_impl.h	/^    static const char magic_[16];$/;"	m	class:double_trie
magic_	trie_impl.h	/^    static const char magic_[16];$/;"	m	class:single_trie
main	regress_case.cc	/^int main()$/;"	f
main	regress_file.cc	/^int main(int argc, char *argv[])$/;"	f
main	regress_naoki.cc	/^int main ()$/;"	f
main	regress_prefix.cc	/^int main(int argc, char *argv[])$/;"	f
main	trie_tool.cc	/^int main(int argc, char *argv[])$/;"	f
max	trie_impl.h	/^        char_type max; \/\/\/< A Maximum value$/;"	m	struct:basic_trie::__anon3
max_state	trie_impl.h	/^    size_type max_state() const$/;"	f	class:basic_trie
max_state_	trie_impl.h	/^    size_type max_state_;  \/\/\/< Number of state being used.$/;"	m	class:basic_trie
min	trie_impl.h	/^        char_type min; \/\/\/< A Minimum value$/;"	m	struct:basic_trie::__anon3
mmap_	trie_impl.h	/^    void *mmap_;$/;"	m	class:double_trie
mmap_	trie_impl.h	/^    void *mmap_;$/;"	m	class:single_trie
mmap_size_	trie_impl.h	/^    size_t mmap_size_;$/;"	m	class:double_trie
mmap_size_	trie_impl.h	/^    size_t mmap_size_;$/;"	m	class:single_trie
next	trie_impl.h	/^    size_type next(size_type s, char_type ch) const$/;"	f	class:basic_trie
next_accept_	trie_impl.h	/^    size_type next_accept_, next_index_;$/;"	m	class:double_trie
next_index_	trie_impl.h	/^    size_type next_accept_, next_index_;$/;"	m	class:double_trie
next_suffix_	trie_impl.h	/^    size_type next_suffix_; \/\/\/< Next available suffix$/;"	m	class:single_trie
operator =	trie.h	/^    const key_type &operator=(const key_type &rhs)$/;"	f	class:trie::key_type
operator =	trie_impl.cc	/^basic_trie &basic_trie::operator=(const basic_trie &trie)$/;"	f	class:basic_trie
outdegree	trie_impl.h	/^    size_t outdegree(size_type s) const$/;"	f	class:double_trie
owner	trie_impl.h	/^    bool owner() const$/;"	f	class:basic_trie
owner_	trie_impl.h	/^    bool owner_;           \/\/\/< Ownership of data.$/;"	m	class:basic_trie
pop	trie.h	/^    char_type pop()$/;"	f	class:trie::key_type
prefix_search	trie_impl.cc	/^basic_trie::prefix_search(const key_type &prefix, result_type *result) const$/;"	f	class:basic_trie
prefix_search	trie_impl.cc	/^double_trie::prefix_search(const key_type &key, result_type *result) const$/;"	f	class:double_trie
prefix_search	trie_impl.cc	/^single_trie::prefix_search(const key_type &key, result_type *result) const$/;"	f	class:single_trie
prefix_search_aux	trie_impl.cc	/^size_t basic_trie::prefix_search_aux(size_type s,$/;"	f	class:basic_trie
pretty_size	trie_impl.cc	/^static const char* pretty_size(size_t size, char *buf, size_t buflen)$/;"	f	file:
prev	trie_impl.h	/^    size_type prev(size_type s) const$/;"	f	class:basic_trie
push	trie.h	/^    void push(char_type ch)$/;"	f	class:trie::key_type
query_trie	trie_tool.cc	/^query_trie(const char *query, const char *index, bool prefix, bool verbose)$/;"	f	file:
read_from_text	trie.cc	/^void trie::read_from_text(const char *source, bool verbose)$/;"	f	class:trie
read_from_text	trie_impl.h	/^    void read_from_text(const char *source, bool verbose)$/;"	f	class:basic_trie
rear_relocator_	trie_impl.h	/^    trie_relocator<double_trie> *front_relocator_, *rear_relocator_;$/;"	m	class:double_trie
rear_trie	trie_impl.h	/^    const basic_trie *rear_trie() const$/;"	f	class:double_trie
refer_	trie_impl.h	/^    std::map<size_type, refer_type> refer_;$/;"	m	class:double_trie
refer_type	trie_impl.h	/^    } refer_type;$/;"	t	class:double_trie	typeref:struct:double_trie::__anon7
referer	trie_impl.h	/^        std::set<size_type> referer;$/;"	m	struct:double_trie::__anon7
relocate	trie_impl.cc	/^basic_trie::relocate(size_type stand,$/;"	f	class:basic_trie
relocate	trie_impl.h	/^    void relocate(size_type s, size_type t)$/;"	f	class:trie_relocator
relocate_	trie_impl.h	/^    relocate_function relocate_;$/;"	m	class:trie_relocator
relocate_front	trie_impl.h	/^    void relocate_front(size_type s, size_type t)$/;"	f	class:double_trie
relocate_function	trie_impl.h	/^    typedef void (T::*relocate_function)(size_type, size_type);$/;"	t	class:trie_relocator
relocate_rear	trie_impl.h	/^    void relocate_rear(size_type s, size_type t)$/;"	f	class:double_trie
relocator_	trie_impl.h	/^    trie_relocator_interface<size_type> *relocator_;$/;"	m	class:basic_trie
remove_accept_state	trie_impl.h	/^    void remove_accept_state(size_type s)$/;"	f	class:double_trie
resize	trie_impl.h	/^T* resize(T *ptr, size_t old_size, size_t new_size)$/;"	f
resize_common	trie_impl.h	/^    void resize_common(size_type size)$/;"	f	class:single_trie
resize_cstr	trie.h	/^    void resize_cstr() const$/;"	f	class:trie::key_type
resize_data	trie.h	/^    void resize_data(size_t size)$/;"	f	class:trie::key_type
resize_state	trie_impl.h	/^    void resize_state(size_type size)$/;"	f	class:basic_trie
resize_suffix	trie_impl.h	/^    void resize_suffix(size_type size)$/;"	f	class:single_trie
result_type	trie.h	/^    typedef std::vector<std::pair<key_type, value_type> > result_type;$/;"	t	class:trie
rhs_	trie_impl.h	/^    basic_trie *lhs_, *rhs_;$/;"	m	class:double_trie
rhs_append	trie_impl.cc	/^double_trie::rhs_append(const char_type *inputs)$/;"	f	class:double_trie
rhs_clean_more	trie_impl.cc	/^void double_trie::rhs_clean_more(size_type t)$/;"	f	class:double_trie
rhs_clean_one	trie_impl.h	/^    bool rhs_clean_one(size_type t)$/;"	f	class:double_trie
rhs_insert	trie_impl.cc	/^void double_trie::rhs_insert(size_type s, size_type r,$/;"	f	class:double_trie
sanity_delete	trie_impl.cc	34;"	d	file:
search	trie.cc	/^bool trie::search(const char *inputs, size_t length,$/;"	f	class:trie
search	trie_impl.cc	/^bool basic_trie::search(const key_type &key, value_type *value) const$/;"	f	class:basic_trie
search	trie_impl.cc	/^bool double_trie::search(const key_type &key, value_type *value) const$/;"	f	class:double_trie
search	trie_impl.cc	/^bool single_trie::search(const key_type &key, value_type *value) const$/;"	f	class:single_trie
set_base	trie_impl.h	/^    void set_base(size_type s, size_type val)$/;"	f	class:basic_trie
set_check	trie_impl.h	/^    void set_check(size_type s, size_type val)$/;"	f	class:basic_trie
set_last_base	trie_impl.h	/^    void set_last_base(size_type base)$/;"	f	class:basic_trie
set_link	trie_impl.h	/^    size_type set_link(size_type s, size_type t)$/;"	f	class:double_trie
set_relocator	trie_impl.h	/^    void set_relocator(trie_relocator_interface<size_type> *relocator)$/;"	f	class:basic_trie
signed_value	regress_case.cc	12;"	d	file:
signed_value	regress_prefix.cc	12;"	d	file:
single_trie	trie_impl.cc	/^single_trie::single_trie(const char *filename)$/;"	f	class:single_trie
single_trie	trie_impl.cc	/^single_trie::single_trie(size_t size)$/;"	f	class:single_trie
single_trie	trie_impl.h	/^class single_trie: public trie$/;"	c
size	trie_impl.h	/^        size_t size;     \/\/\/< Buffer size.$/;"	m	struct:single_trie::__anon9
size	trie_impl.h	/^        size_type size;  \/\/\/< Size of state buffer$/;"	m	struct:basic_trie::__anon2
size_type	trie.h	/^    typedef int32_t size_type;$/;"	t	class:trie
size_type	trie_impl.h	/^    typedef trie::size_type size_type;$/;"	t	class:trie_relocator
state_type	trie_impl.h	/^    } state_type;$/;"	t	class:basic_trie	typeref:struct:basic_trie::__anon1
states	trie_impl.h	/^    const state_type *states() const$/;"	f	class:basic_trie
states_	trie_impl.h	/^    state_type *states_;   \/\/\/< Pointer to state buffer.$/;"	m	class:basic_trie
suffix	trie_impl.h	/^    const suffix_type *suffix()$/;"	f	class:single_trie
suffix_	trie_impl.h	/^    suffix_type *suffix_;   \/\/\/< Pointer to suffix.$/;"	m	class:single_trie
suffix_size	trie_impl.h	/^        size_type suffix_size;  \/\/\/< Size of suffix buffer.$/;"	m	struct:single_trie::__anon8
suffix_type	trie_impl.h	/^    typedef size_type suffix_type;$/;"	t	class:single_trie
trace	trie_impl.cc	/^void basic_trie::trace(size_type s) const$/;"	f	class:basic_trie
trace_suffix	trie_impl.h	/^    void trace_suffix(size_type start, size_type count) const$/;"	f	class:single_trie
trace_table	trie_impl.h	/^    void trace_table(size_type istart,$/;"	f	class:double_trie
trie	trie.h	/^    explicit trie(const char *filename) {}$/;"	f	class:trie
trie	trie.h	/^    explicit trie(size_t size) {}$/;"	f	class:trie
trie	trie.h	/^    trie() {}$/;"	f	class:trie
trie	trie.h	/^class trie {$/;"	c
trie	trie_impl.h	/^    const basic_trie *trie()$/;"	f	class:single_trie
trie_	trie_impl.h	/^    basic_trie *trie_;      \/\/\/< Pointer to trie.$/;"	m	class:single_trie
trie_relocator	trie_impl.h	/^    trie_relocator(T *who, relocate_function relocate)$/;"	f	class:trie_relocator
trie_relocator	trie_impl.h	/^class trie_relocator: public trie_relocator_interface<trie::size_type> {$/;"	c
trie_relocator_interface	trie_impl.h	/^template<typename T> class trie_relocator_interface {$/;"	c
trie_type	trie.h	/^    enum trie_type {$/;"	g	class:trie
unsigned_value	regress_case.cc	11;"	d	file:
unsigned_value	regress_prefix.cc	11;"	d	file:
unused	trie_impl.h	/^        char unused[40]; \/\/\/< for 32\/64bits compatible.$/;"	m	struct:double_trie::__anon4
unused	trie_impl.h	/^        char unused[44];  \/\/\/< for 32\/64 bits compatible.$/;"	m	struct:single_trie::__anon8
unused	trie_impl.h	/^        char unused[60]; \/\/\/< Unused, for 32\/64 bits compatible.$/;"	m	struct:basic_trie::__anon2
value_type	trie.h	/^    typedef int32_t value_type;$/;"	t	class:trie
watcher_	trie_impl.h	/^    size_type watcher_[2];$/;"	m	class:double_trie
who_	trie_impl.h	/^    T *who_;$/;"	m	class:trie_relocator
~basic_trie	trie_impl.cc	/^basic_trie::~basic_trie()$/;"	f	class:basic_trie
~double_trie	trie_impl.cc	/^double_trie::~double_trie()$/;"	f	class:double_trie
~key_type	trie.h	/^    ~key_type()$/;"	f	class:trie::key_type
~single_trie	trie_impl.cc	/^single_trie::~single_trie()$/;"	f	class:single_trie
~trie	trie_impl.cc	/^trie::~trie()$/;"	f	class:trie
~trie_relocator_interface	trie_impl.h	/^    virtual ~trie_relocator_interface() {}$/;"	f	class:trie_relocator_interface
